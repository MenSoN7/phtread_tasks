#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char *argv[])
{
	if (argc != 3)
	{
		printf("Неверное количество аргументов!\n");
		return -1;
	}

	if (atoi(argv[1]) > atoi(argv[2]))
	{
		printf("Первый аргумент должен быть меньше второго!\n");
		return -1;
	}

	FILE *file = fopen("intervals.txt", "w");
	long int p = atoi(argv[1]);
	long int q = atoi(argv[2]);
	long int count_of_numbers = q - p + 1;

	long int count_of_cores = sysconf(_SC_NPROCESSORS_CONF);

	if (count_of_numbers < count_of_cores *2)
	{
		fprintf(file, "%ld %ld\n", p, q);
		fclose(file);
		return 0;
	}

	//если левая граница = 1
	if (p == 1)
	{
		fprintf(file, "%ld %ld\n", p, (count_of_numbers / count_of_cores));
		for (int i = 1; i < count_of_cores; ++i)
		{
			fprintf(file, "%ld %ld\n", i *(count_of_numbers / count_of_cores) + 1, (i + 1) *(count_of_numbers / count_of_cores));
		}
	}

	//если левая граница не равна 1 
	else
	{
		fprintf(file, "%ld %ld\n", p, p + (count_of_numbers / count_of_cores));
		for (int i = 1; i < count_of_cores; ++i)
		{
			// вторая граница интервала  = Q - в случае последней итерации и = p+ (i + 1) *(count_of_numbers / count_of_cores) в других случаях
			fprintf(file, "%ld %ld\n", i *(count_of_numbers / count_of_cores) + 1 + p, (i != 7) ? p + (i + 1) *(count_of_numbers / count_of_cores) : q);
		}
	}

	fclose(file);
	return 0;
}
